package game;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;

import javax.swing.JOptionPane;

import GUI.GameWindow;
import cardDeck.Card;
import cardDeck.CardDeck;

public class Game implements ActionListener {
	public static final int NUM_PLAYERS = 5;
	public static final int NUM_ROUNDS = 10;	//round # that has the max number of cards
	
	private CardDeck cardDeck;
	//private int numPlayers;
	//private int numRounds;
	private LinkedList<Player> players;
	private Card trump;
	private Card first;
	private int totalGuess;
	private GameWindow gameWindow;
	private int userNum;
	private GameController controller;
	private volatile boolean pause;
	
	public Game(){
		
		totalGuess = 0;
		controller = new GameController();
		players = new LinkedList<Player>();
		
		controller.enterPlayers(players, NUM_PLAYERS);
		gameWindow = new GameWindow();
		userNum = 1;
		
		/*for(int i = 1; i <= NUM_ROUNDS; i++){
			startNewRound(i, i);
		}
		
		for(int i = 1; i < NUM_ROUNDS; i++){
			startNewRound(10 - i, 10 + i);
		}*/
		
		startNewRound(1, 1);

	}
	
	private void startNewRound(int numTricks, int roundNum){
		
		//create a card deck and shuffle it
		cardDeck = new CardDeck();
		cardDeck.shuffle(30);
		
		//deal card(s) to each player
		controller.dealCards(numTricks, cardDeck, players);
		
		//display user's hand
		gameWindow.displayUserHand(players.get(userNum - 1));
		
		//determine the trump card
		trump = cardDeck.deal();
		gameWindow.displayTrumpCard(trump);
		
		//get players' guesses
		//totalGuess = controller.getGuesses(totalGuess, numTricks, roundNum, players);
		
		//start laying down cards
		JOptionPane.showMessageDialog(null, "Let's Start!");
		gameWindow.enableCardsOnHand();
		
		/*for(int i = 1; i <= numTricks; i++){
			startNewTrick(i);
		}*/
		
		startNewTrick(1);
		
		//userNum++;
		/*if(userNum > players.size()){
			userNum -= players.size();
		}*/
	}
	
	private void startNewTrick(int trickNum){
		
		//first trick of a round
		if(trickNum == 1){
			//first turn
			first = layFirstCard(players.getFirst());
			
		} else{
			
		}
	}
	
	private Card layFirstCard(Player player){
		//first turn player pick any card
		if(player.isHuman()){
			JOptionPane.showMessageDialog(null, "Pick any card to lay down");
			
			new Thread(new Runnable() {

				@Override
				public void run() {
					
					while (pause) {
						try {
							Thread.sleep(1000);
							//check if player picks any card
							pause = (player.getCardOnTable() == null);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					
					//for the rest of the players...
					layFollowingCards(players, 1);
					
				}
				
			}).start();
			
		} else{
			player.getRandomCard();
		}
		
		return player.getCardOnTable();
	}
	
	private void layFollowingCards(LinkedList<Player> players, int startIndex){
		System.out.println(pause);
		for(int j = startIndex; j < players.size(); j++){
			
			//users get to choose the card to lay down
			if(players.get(j).isHuman()){
				controller.checkValidCards(players.get(j).getCardsOnHand(), first, trump);
				while(players.get(j).getCardOnTable() == null){
					JOptionPane.showMessageDialog(null, "Your turn");
				}
			} else{
				//each computer player lays down one card
				players.get(j).layCardOnTable();
			}
			
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}

}
